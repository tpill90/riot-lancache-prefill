namespace RiotPrefill.Settings
{
    public static class AppConfig
    {
        static AppConfig()
        {
            // Create required folders
            Directory.CreateDirectory(ConfigDir);
            Directory.CreateDirectory(CacheDir);
        }

        private static bool _verboseLogs;
        public static bool VerboseLogs
        {
            get => _verboseLogs;
            set
            {
                _verboseLogs = value;
                AnsiConsoleExtensions.WriteVerboseLogs = value;
            }
        }

        /// <summary>
        /// Downloaded manifests, as well as other metadata, are saved into this directory to speedup future prefill runs.
        /// All data in here should be able to be deleted safely.
        /// </summary>
        public static readonly string CacheDir = CacheDirUtils.GetCacheDirBaseDirectories("RiotPrefill", CacheDirVersion);

        /// <summary>
        /// Increment when there is a breaking change made to the files in the cache directory
        /// </summary>
        private const string CacheDirVersion = "v1";

        /// <summary>
        /// Contains user configuration.  Should not be deleted, doing so will reset the app back to defaults.
        /// </summary>
        private static readonly string ConfigDir = Path.Combine(AppContext.BaseDirectory, "Config");

        #region Serialization file paths

        public static readonly string UserSelectedAppsPath = Path.Combine(ConfigDir, "selectedAppsToPrefill.json");

        /// <summary>
        /// Keeps track of which depots have been previously downloaded.  Is used to determine whether or not a game is up to date,
        /// based on whether all of the depots being downloaded are up to date.
        /// </summary>
        //TODO implement
        public static readonly string SuccessfullyDownloadedDepotsPath = Path.Combine(ConfigDir, "successfullyDownloadedDepots.json");

        #endregion

        #region Debugging

        private static bool _compareAgainstRealRequests;

        public static readonly string DebugOutputDir = Path.Combine(CacheDir, "Debugging");

        /// <summary>
        /// Skips using locally cached manifests. Saves disk space, at the expense of slower subsequent runs.  Intended for debugging.
        /// </summary>
        public static bool NoLocalCache { get; set; }

        /// <summary>
        /// If set to true, will skip making any non-required requests, and instead record them to later be compared against for accuracy.
        /// Dramatically speeds up debugging since bandwidth use is a small fraction of the full download size (ex. 100mb vs a possible 30gb download).
        /// </summary>
        public static bool SkipDownloads { get; set; }

        /// <summary>
        /// To make debugging easier I generate the access.log files for each product by installing the game via Riot.
        /// These files are then compared against the request list generated by RiotPrefill to determine the delta.
        /// </summary>
        public static readonly string LogFileBasePath = @$"{DirectorySearch.TryGetSolutionDirectory()}/Logs";

        /// <summary>
        /// When enabled, will compare the requests that this application made against the previously recorded requests that the real Riot launcher makes.
        /// A comparison will be output to screen, giving feedback on how accurate our application is vs Riot
        /// </summary>
        public static bool CompareAgainstRealRequests
        {
            get => _compareAgainstRealRequests;
            set
            {
                _compareAgainstRealRequests = value;
                // Need to set this to true as well, otherwise you will still need to wait for the whole download to finish, which isn't useful for running the comparison
                SkipDownloads = true;
            }
        }

        public static bool DownloadWholeBundle { get; set; }

        public static bool DownloadMultirangeOnly { get; set; }

        #endregion
    }
}